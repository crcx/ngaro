~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Retro has a simple interpreter. The interpreter calls accept,
passing it the ascii value 32 (for space) as a delimiter. Input
is accepted and added to the tib until the delimiter is
encountered. At this point, the interpreter cycles through the
dictionary, comparing the input in tib to the name of each
entry. This loop goes from the newest to the oldest entry, and
exits when a match is found. If a match was found, the xt of
the word is pushed to the stack and the class handler attached
to its dictionary entry is called. This handler is responsible
for handling the xt and carrying out the proper behavior for
the word.

If a match is not found, the interpreter tries to convert the
token to an integer. If successful, the integer value is pushed
to the stack and the .data class handler is called.

If a conversion to integer failed, and no match was found, the
interpreter calls notfound to report the error.

This process is then repeated until Retro is shutdown.

Tip:
  Retro has no separate compiler loop. Instead, each class
  handler is responsible for compiling the code for words
  associated with it. This allows a very straightforward
  interpreter loop.
