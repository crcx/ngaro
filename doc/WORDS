This document provides an overview of the words and variables
that make up the core Retro language. All are defined in the
retro.forth source file.

This file is divded by word class.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Inline

1+             ( x-y )
Increment TOS by 1.

1-             ( x-y )
Decrement TOS by 1.

swap           ( xy-yx )
Exchange TOS and NOS

drop           ( xy-x )
Drop the TOS

and            ( xy-z )
Bitwise AND operation

or             ( xy-z )
Bitwise OR operation

xor            ( xy-z )
Bitwise XOR operation

@              ( a-n )
Fetch a value from an address

!              ( na- )
Store a value to an address

+              ( xy-z )
Add two numbers

-              ( xy-z )
Subract Y from X

*              ( xy-z )
Multiply two numbers

/mod           ( xy-qr )
Divide X/Y leaving the quotient and remainder

<<             ( xy-z )
Shift Y left by X bits

>>             ( xy-z )
Shift Y right by X bits

nip            ( xy-y )
Drop the NOS

dup            ( n-nn )
Duplicate TOS

in             ( n-n )
Read a value from an I/O port

out            ( xy- )
Write a value to an I/O port
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Words

here           ( -a )
Returns the next available address on the heap

,              ( n- )
Store a byte to the next available address on the heap

]              ( - )
Turn the 'compiler' variable on

create         ( "- )
Create a new dictionary entry. Parses for a name and assigns a
class of '.data'

:              ( "- )
Create a new word. Parses for a name and assigns a class of
'.word'

macro:         ( "- )
Create a new macro. Parses for a name and assigns a class of
'.macro'

compiler:      ( "- )
Create a new compile-only word. Parses for a name and assigns a
class of '.compiler'

accept         ( n- )
Take a character value off the stack and parse until the value
is encountered. Results are stored in 'tib'

cr             ( - )
Emit a newline character

emit           ( n- )
Display an ASCII character

type           ( $- )
Display a string

clear          ( - )
Clear the display

words          ( - )
Display a list of all defined words, from newest to oldest

key            ( -n )
Wait for a keypress. Returns the ASCII value of the key

over           ( xy-xyx )
Put a copy of NOS on the top of the data stack

2drop          ( xy- )
Drop the top two values from the data stack

not            ( x-y )
Perform a NOT operation on TOS

rot            ( xyz-yzx )
Rotate the top three values on the stack

-rot           ( xyz-xzy )
Undo a 'rot'

tuck           ( xy-yxy )
Put a copy of TOS under NOS

2dup           ( xy-xyxy )
Duplicate the top two items on the stack

on             ( a- )
Set a variable to -1

off            ( a- )
Set a variable to 0

/              ( xy-q )
Divide x/y

mod            ( xy-r )
Get the remainder after dividing x/y

neg            ( x-y )
Invert the sign of x

execute        ( a- )
Call a word or subroutine by address

.              ( n- )
Display a number

"              ( "-$ )
Parse until " is encounted, and leave a pointer to the string
on the stack. Use with 'tempString' or 'keepString' to preserve
it for later use.

compare        ( $$-f )
Compare two strings

wait           ( - )
Wait for an I/O event

'              ( "-a )
Get the address of a word. Parses for the word name

@+             ( a-an )
Fetch the value from an address and return the value and the
address that follows the one fetched from.

!+             ( na-a )
Store a value to an address, and return the next address

+!             ( na- )
Add the value (n) to the contents of an address, storing the
results in the address

-!             ( na- )
Subtract the value (n) from the contents of an address, storing
the results in the address

:is            ( aa- )
Set an word to point to a different address

:devector      ( a- )
Remove the vector set by 'is' or ':is' from a word

is             ( a"- )
Set a word to point to a different address. Parses for the word
name to reassign

devector       ( "- )
Remove the vector set by 'is' or ':is' from a word. Parses for
the word name to clear

compile        ( a- )
Generate the code to call a word at a given address

literal,       ( n- )
Generate the code to treat TOS as a literal value

tempString     ( $-$ )
Move a string to a temporary, safe buffer

keepString     ( $-$ )
Move the string to the permanent string buffer

redraw         ( - )
Update the display

getLength      ( $-n )
Get the length of a string

bye            ( - )
Exit Retro

(remap-keys)   ( n-n )
A hook into 'accept'; this allows for remapping keys to
other values

with-class     ( aa- )
Used to call a word with its associated class handler

.word          ( a- )
Handler for normal words

.macro         ( a- )
Handler for macros

.data          ( n- )
Handler for data elements

.inline        ( a- )
Handler for words which can be inlined directly

.compiler      ( a- )
Handler for words which can only be used during compilation

d->class       ( a-a )
Given a dictionary header, get the class field

d->name        ( a-a )
Given a dictionary header, get the name field

d->xt          ( a-a )
Given a dictionary header, get the address field

boot           ( - )
Hook that is called whenever Retro is started

depth          ( -n )
Get the depth of the data stack

reset          ( ...- )
Drop all values from the data stack

notfound       ( - )
Hook for handling the common "Word Not Found" errors

save           ( - )
Save the Retro image (if the VM supports this)

>number        ( $-n )
Convert a string to a number. Only supports decimal

ok             ( - )
Hook called after each token is processed. This is what
displays the "ok" prompt
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Compiler

s"             ( R: -$   C: "- )
[              ( - )
;              ( - )
;;             ( - )
=if            ( R: nn-  C: -a )
>if            ( R: nn-  C: -a )
<if            ( R: nn-  C: -a )
!if            ( R: nn-  C: -a )
then           ( R: -    C: a- )
repeat         ( R: -    C: -a )
again          ( R: -    C: a- )
0;             ( n-  ||  n-n )
push           ( n- )
pop            ( -n )
[']            ( R: -n   C: "- )
for            ( R: n-   C: -a )
next           ( R: -    C: a- )
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Macro

(              ( "- )
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Data

tx             ( -a )
ty             ( -a )
last           ( -a )
compiler       ( -a )
TIB            ( -a )
update         ( -a )
fb             ( -a )
fw             ( -a )
fh             ( -a )
#mem           ( -a )
heap           ( -a )
which          ( -a )
