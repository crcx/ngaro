This document provides an overview of the words and variables
that make up the core Retro language. All are defined in the
retro.forth source file.

This file is divded by word class.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Inline

1+             ( x-y )
Increment TOS by 1.

1-             ( x-y )
Decrement TOS by 1.

swap           ( xy-yx )
Exchange TOS and NOS

drop           ( xy-x )
Drop the TOS

and            ( xy-z )
Bitwise AND operation

or             ( xy-z )
Bitwise OR operation

xor            ( xy-z )
Bitwise XOR operation

@              ( a-n )
Fetch a value from an address

!              ( na- )
Store a value to an address

+              ( xy-z )
Add two numbers

-              ( xy-z )
Subract Y from X

*              ( xy-z )
Multiply two numbers

/mod           ( xy-qr )
Divide X/Y leaving the quotient and remainder

<<             ( xy-z )
Shift Y left by X bits

>>             ( xy-z )
Shift Y right by X bits

nip            ( xy-y )
Drop the NOS

dup            ( n-nn )
Duplicate TOS

in             ( n-n )
Read a value from an I/O port

out            ( xy- )
Write a value to an I/O port
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Words

here           ( -a )
,              ( n- )
]              ( - )
create         ( "- )
:              ( "- )
macro:         ( "- )
compiler:      ( "- )
accept         ( n- )
cr             ( - )
emit           ( n- )
type           ( $- )
clear          ( - )
words          ( - )
key            ( -n )
over           ( xy-xyx )
2drop          ( xy- )
not            ( x-y )
rot            ( xyz-yzx )
-rot           ( xyz-xzy )
tuck           ( xy-yxy )
2dup           ( xy-xyxy )
on             ( a- )
off            ( a- )
/              ( xy-q )
mod            ( xy-r )
neg            ( x-y )
execute        ( a- )
.              ( n- )
"              ( "-$ )
compare        ( $$-f )
wait           ( - )
'              ( "-a )
@+             ( a-an )
!+             ( na-a )
+!             ( na- )
-!             ( na- )
:is            ( aa- )
:devector      ( a- )
is             ( a"- )
devector       ( "- )
compile        ( a- )
literal,       ( n- )
tempString     ( $-$ )
keepString     ( $-$ )
redraw         ( - )
getLength      ( $-n )
bye            ( - )
(remap-keys)   ( n-n )
with-class     ( aa- )
.word          ( a- )
.macro         ( a- )
.data          ( n- )
.inline        ( a- )
.compiler      ( a- )
d->class       ( a-a )
d->name        ( a-a )
d->xt          ( a-a )
boot           ( - )
depth          ( -n )
reset          ( ...- )
notfound       ( - )
save           ( - )
>number        ( $-n )
ok             ( - )
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Compiler

s"             ( R: -$   C: "- )
[              ( - )
;              ( - )
;;             ( - )
=if            ( R: nn-  C: -a )
>if            ( R: nn-  C: -a )
<if            ( R: nn-  C: -a )
!if            ( R: nn-  C: -a )
then           ( R: -    C: a- )
repeat         ( R: -    C: -a )
again          ( R: -    C: a- )
0;             ( n-  ||  n-n )
push           ( n- )
pop            ( -n )
[']            ( R: -n   C: "- )
for            ( R: n-   C: -a )
next           ( R: -    C: a- )
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Macro

(              ( "- )
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Data

tx             ( -a )
ty             ( -a )
last           ( -a )
compiler       ( -a )
TIB            ( -a )
update         ( -a )
fb             ( -a )
fw             ( -a )
fh             ( -a )
#mem           ( -a )
heap           ( -a )
which          ( -a )
